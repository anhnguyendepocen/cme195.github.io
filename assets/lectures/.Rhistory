essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", "1:10"))
head(essay17)
essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10))
essay17
paste0(LETTERS)
paste0(LETTERS, collapse = "")
rep(paste0(LETTERS, collapse = ""), 10)
essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10))
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10))
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
paste("#", essays17[1, 1]), essays17[1, 2]
head(essays17)
paste("#", essays17[1, 1]), essays17[1, 2])
paste("#", essays17[1, 1], essays17[1, 2])
c(paste("#", essays17[i, 1]), essays17[i, 2])
i <- 5
c(paste("#", essays17[i, 1]), essays17[i, 2])
essays17[i, 2]
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
essays17[1, 2]
c(paste("#", essays17[i, 1]), essays17[i, 2])
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", "", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", "-", essays17[i, 1])
fileName <- paste0("C:/Users/AJ Alvero/Desktop/text17", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("C:/Users/AJ Alvero/Desktop/text17", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
CRAN_page <- function(...) {
file.path('https://cran.rstudio.com/src/contrib', ...)
}
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
## we love data.table
library(data.table)
setDT(pkgs)
## drop directories
pkgs <- pkgs[Size != '-']
## drop files that does not seem to be R packages
pkgs <- pkgs[grep('tar.gz$', Name)]
## package name should contain only (ASCII) letters, numbers and dot
pkgs[, name := sub('^([a-zA-Z0-9\\.]*).*', '\\1', Name)]
## grab date from last modified timestamp
pkgs[, date := as.POSIXct(`Last modified`, format = '%d-%b-%Y %H:%M')]
pkgs[, date := as.character(date)]
## keep date and name
pkgs <- pkgs[, .(name, date)]
## list of packages with at least one archived version
archives <- readHTMLTable(readLines(CRAN_page('Archive')),
which = 1, stringsAsFactors = FALSE)
?CRAN_page()
CRAN_page()
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
readLines(CRAN_page())
?readHTMLTable
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(CRAN_page(),
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable("https://cran.rstudio.com/src/contrib/",
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(doc = "https://cran.rstudio.com/src/contrib/",
which = 1, stringsAsFactors = FALSE)
## CRAN mirror to use
CRAN_page <- function(...) {
file.path('https://cran.rstudio.com/src/contrib', ...)
}
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
skip.rows =100,
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(readLines(CRAN_page()),
skip.rows =200,
which = 1, stringsAsFactors = FALSE)
head(readLines(CRAN_page()))
23 + sin(pi/2)
abs(-10) + (17-3)^4
4 * exp(10) + sqrt(2)
# Element-wise multiplication
v1 * c(1,2)
# Element-wise multiplication
v1 <- c(1,2,3,4,5,6,7,8,9,10)
# Element-wise multiplication
v1 * c(1,2)
> 4*3*2
4*3*2
# using column names.
employees$name
# Create the data frame.
employees <- data.frame(
row.names = c("E1", "E2", "E3","E4", "E5"),
name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE )
# Print the data frame.
employees
# using column names.
employees$name
employees[, c("name", "salary")]
# using integer indexing
employees[, 1]
employees[, c(1, 2)]
letters
matrix(0:30, nrow = 5, byrow = FALSE)
matrix(1:30, nrow = 5, byrow = FALSE)
exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5),
late = sampel(c(T, F), 5)
)
exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
matrix(1:30, nrow = 5, byrow = FALSE)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
sample(5:500, 10)
Z
Z <- sample(letters, 1000)
Z <- sample(letters, 1000)
Z <- sample(letters, 1000, replace = T)
Z
head(Z)
Z <- sample(letters, 1000, replace = T)
head(Z)
table(Z)
table(Z)[table(Z) %% 2 == 0]
matrix(1:30, nrow = 5, byrow = FALSE)
Y <- X + matrix(rnorm(30), nrow = 5)
X <- matrix(1:30, nrow = 5, byrow = FALSE)
X
Y <- X + matrix(rnorm(30), nrow = 5)
Y
invY <- Y^(-1)
X <- matrix(1:25, nrow = 5, byrow = FALSE)
X
Y <- X + matrix(rnorm(30), nrow = 5)
X <- matrix(1:36, nrow = 5, byrow = FALSE)
X
X <- matrix(1:36, nrow = 6, byrow = FALSE)
X
Y <- X + matrix(rnorm(36), nrow = 6)
Y
invY <- solve(Y)
invY %*% Y
round(res, digits = 0.001)
res <- invY %*% Y
res
round(res, digits = 3)
round(res, digits = 5)
round(res, digits = 6)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
(exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
))
mean(exams$score)
set.seed(123)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
set.seed(123)
(exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
))
set.seed(123)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
exams[which.max(exams$score), ]
rm(list = ls())
library(tidyverse)
summary(cars)
plot(pressure)
library(tidyverse)
summary(cars)
?readr_example
readr::readr_example
?readr::readr_example
mtcars <- read_csv(readr_example("mtcars.csv"))
library(tidyverse)
library(tidyverse)
mtcars <- read_csv(readr_example("mtcars.csv"))
options(width = 80)
knitr::opts_chunk$set(
warning = FALSE, message = FALSE,
cache = FALSE, tidy = FALSE, size = "small")
library(dplyr)
mtcars <- read_csv(readr_example("mtcars.csv"))
mtcars <- read_csv("mtcars.csv")
?read_fwf.
?read_fwf
challenge <- read_csv(readr_example("challenge.csv"))
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()) )
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()) )
challenge2
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
